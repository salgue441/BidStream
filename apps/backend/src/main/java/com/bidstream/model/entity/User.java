package com.bidstream.model.entity;

import jakarta.persistence.Id;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Column;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import java.time.LocalDateTime;
import java.util.UUID;

/**
 * User entity representing users in the BidStream platform.
 * Contains user authentication details, personal information,
 * and account status information.
 */
@Entity
@Table(name = "users")
public class User {

  /**
   * Minimum allowed length for username (3 characters).
   * Used in {@code @Size} validation for username field.
   */
  public static final int MIN_USERNAME_LENGTH = 3;

  /**
   * Maximum allowed length for username (50 characters).
   * Used in {@code @Size} validation and as column length for username field.
   */
  public static final int MAX_USERNAME_LENGTH = 50;

  /**
   * Maximum allowed length for first name (100 characters).
   * Used as column length for firstName field.
   */
  public static final int MAX_FIRST_NAME_LENGTH = 100;

  /**
   * Maximum allowed length for last name (100 characters).
   * Used as column length for lastName field.
   */
  public static final int MAX_LAST_NAME_LENGTH = 100;

  /**
   * Maximum allowed length for phone number (20 characters).
   * Used as column length for phone field.
   */
  public static final int MAX_PHONE_LENGTH = 20;

  /**
   * Maximum allowed length for avatar URL (500 characters).
   * Used as column length for avatarUrl field.
   */
  public static final int MAX_AVATAR_URL_LENGTH = 500;

  /**
   * Unique identifier for the user.
   * Automatically generated by JPA.
   *
   * @see jakarta.persistence.Id
   * @see jakarta.persistence.GeneratedValue
   */
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private UUID id;

  /**
   * User's email address. Must be unique and non-null.
   * Validated for proper email format and non-blank value.
   *
   * @see jakarta.persistence.Column
   * @see jakarta.validation.constraints.Email
   * @see jakarta.validation.constraints.NotBlank
   */
  @Column(unique = true, nullable = false)
  @Email(message = "Email should be valid")
  @NotBlank(message = "Email is required")
  private String email;

  /**
   * Unique username for the user. Must be between 3-50 characters and non-null.
   *
   * @see #MIN_USERNAME_LENGTH
   * @see #MAX_USERNAME_LENGTH
   * @see jakarta.persistence.Column
   * @see jakarta.validation.constraints.NotBlank
   * @see jakarta.validation.constraints.Size
   */
  @Column(unique = true, nullable = false,
      length = MAX_USERNAME_LENGTH)
  @NotBlank(message = "Username is required")
  @Size(min = MIN_USERNAME_LENGTH,
      max = MAX_USERNAME_LENGTH,
      message = "Username must be between 3 and 50 characters")
  private String username;

  /**
   * Hashed password for the user. Stored securely and cannot be null.
   *
   * @see jakarta.persistence.Column
   * @see jakarta.validation.constraints.NotBlank
   */
  @Column(name = "password_hash", nullable = false)
  @NotBlank(message = "Password is required")
  private String passwordHash;

  /**
   * User's first name. Cannot be null and has maximum length of 100 characters.
   *
   * @see #MAX_FIRST_NAME_LENGTH
   * @see jakarta.persistence.Column
   * @see jakarta.validation.constraints.NotBlank
   */
  @Column(name = "first_name", nullable = false,
      length = MAX_FIRST_NAME_LENGTH)
  @NotBlank(message = "First name is required")
  private String firstName;

  /**
   * User's last name. Cannot be null and has maximum length of 100 characters.
   *
   * @see #MAX_LAST_NAME_LENGTH
   * @see jakarta.persistence.Column
   * @see jakarta.validation.constraints.NotBlank
   */
  @Column(name = "last_name", nullable = false,
      length = MAX_LAST_NAME_LENGTH)
  @NotBlank(message = "Last name is required")
  private String lastName;

  /**
   * User's phone number. Optional field with maximum length of 20 characters.
   *
   * @see #MAX_PHONE_LENGTH
   * @see jakarta.persistence.Column
   */
  @Column(length = MAX_PHONE_LENGTH)
  private String phone;

  /**
   * URL to user's avatar image. Optional field with maximum length of 500
   * characters.
   *
   * @see #MAX_AVATAR_URL_LENGTH
   * @see jakarta.persistence.Column
   */
  @Column(name = "avatar_url", length = MAX_AVATAR_URL_LENGTH)
  private String avatarUrl;

  /**
   * Flag indicating whether user's email has been verified.
   * Defaults to false when user is created.
   */
  @Column(name = "email_verified")
  private Boolean emailVerified = false;

  /**
   * Flag indicating whether user account is locked (typically due to security
   * reasons).
   * Defaults to false when user is created.
   */
  @Column(name = "account_locked")
  private Boolean accountLocked = false;

  /**
   * Counter for failed login attempts. Used for security lockout.
   * Defaults to 0 when user is created.
   */
  @Column(name = "failed_login_attempts")
  private Integer failedLoginAttempts = 0;

  /**
   * Timestamp of user's last successful login.
   * Null if user has never logged in.
   */
  @Column(name = "last_login_at")
  private LocalDateTime lastLoginAt;

  /**
   * Timestamp when user account was created.
   * Automatically set and cannot be updated.
   */
  @Column(name = "created_at", updatable = false)
  private LocalDateTime createdAt;

  /**
   * Timestamp when user account was last updated.
   * Automatically maintained by the system.
   */
  @Column(name = "updated_at")
  private LocalDateTime updatedAt;

  /**
   * Default constructor.
   */
  public User() {
  }

  /**
   * Constructor with required fields.
   *
   * @param newEmail        the user's email
   * @param newUsername     the user's username
   * @param newPasswordHash the hashed password
   * @param newFirstName    the user's first name
   * @param newLastName     the user's last name
   */
  public User(final String newEmail, final String newUsername,
      final String newPasswordHash, final String newFirstName,
      final String newLastName) {
    this.email = newEmail;
    this.username = newUsername;
    this.passwordHash = newPasswordHash;
    this.firstName = newFirstName;
    this.lastName = newLastName;
  }

  /**
   * JPA lifecycle callback that executes before entity persistence (insert).
   * Automatically sets the creation and update timestamps to current time.
   *
   * <p>
   * This method is invoked automatically by JPA when the entity is first
   * persisted. It ensures both {@code createdAt} and {@code updatedAt}
   * timestamps are initialized.
   * </p>
   *
   * @see jakarta.persistence.PrePersist
   * @see #createdAt
   * @see #updatedAt
   */
  @PrePersist
  protected void onCreate() {
    this.createdAt = LocalDateTime.now();
    this.updatedAt = LocalDateTime.now();
  }

  /**
   * JPA lifecycle callback that executes before entity update.
   * Automatically updates the modification timestamp to current time.
   *
   * <p>
   * This method is invoked automatically by JPA whenever the entity is updated.
   * It ensures the {@code updatedAt} timestamp reflects the last modification
   * time.
   * </p>
   *
   * @see jakarta.persistence.PreUpdate
   * @see #updatedAt
   */
  @PreUpdate
  protected void onUpdate() {
    this.updatedAt = LocalDateTime.now();
  }

  // Getters and Setters with proper documentation

  /**
   * Gets the unique identifier for this user.
   *
   * @return the user's UUID
   */
  public UUID getId() {
    return id;
  }

  /**
   * Sets the unique identifier for this user.
   *
   * @param newId the UUID to set
   */
  public void setId(final UUID newId) {
    this.id = newId;
  }

  /**
   * Gets the user's email address.
   *
   * @return the email address (never null)
   */
  public String getEmail() {
    return email;
  }

  /**
   * Sets the user's email address.
   *
   * @param newEmail the email address to set (must not be null)
   */
  public void setEmail(final String newEmail) {
    this.email = newEmail;
  }

  /**
   * Gets the user's unique username.
   *
   * @return the username (never null)
   */
  public String getUsername() {
    return username;
  }

  /**
   * Sets the user's unique username.
   *
   * @param newUsername the username to set (must not be null)
   */
  public void setUsername(final String newUsername) {
    this.username = newUsername;
  }

  /**
   * Gets the hashed password for this user.
   *
   * @return the password hash (never null)
   */
  public String getPasswordHash() {
    return passwordHash;
  }

  /**
   * Sets the hashed password for this user.
   *
   * @param newPasswordHash the password hash to set (must not be null)
   */
  public void setPasswordHash(final String newPasswordHash) {
    this.passwordHash = newPasswordHash;
  }

  /**
   * Gets the user's first name.
   *
   * @return the first name (never null)
   */
  public String getFirstName() {
    return firstName;
  }

  /**
   * Sets the user's first name.
   *
   * @param newFirstName the first name to set (must not be null)
   */
  public void setFirstName(final String newFirstName) {
    this.firstName = newFirstName;
  }

  /**
   * Gets the user's last name.
   *
   * @return the last name (never null)
   */
  public String getLastName() {
    return lastName;
  }

  /**
   * Sets the user's last name.
   *
   * @param newLastName the last name to set (must not be null)
   */
  public void setLastName(final String newLastName) {
    this.lastName = newLastName;
  }

  /**
   * Gets the user's phone number.
   *
   * @return the phone number (may be null)
   */
  public String getPhone() {
    return phone;
  }

  /**
   * Sets the user's phone number.
   *
   * @param newPhone the phone number to set
   */
  public void setPhone(final String newPhone) {
    this.phone = newPhone;
  }

  /**
   * Gets the URL for the user's avatar image.
   *
   * @return the avatar URL (may be null)
   */
  public String getAvatarUrl() {
    return avatarUrl;
  }

  /**
   * Sets the URL for the user's avatar image.
   *
   * @param newAvatarUrl the avatar URL to set
   */
  public void setAvatarUrl(final String newAvatarUrl) {
    this.avatarUrl = newAvatarUrl;
  }

  /**
   * Checks if the user's email has been verified.
   *
   * @return true if email is verified, false otherwise
   */
  public Boolean isEmailVerified() {
    return emailVerified;
  }

  /**
   * Sets the email verification status for this user.
   *
   * @param isEmailVerified true to mark email as verified
   */
  public void setEmailVerified(final Boolean isEmailVerified) {
    this.emailVerified = isEmailVerified;
  }

  /**
   * Checks if the user's account is locked.
   *
   * @return true if account is locked, false otherwise
   */
  public Boolean isAccountLocked() {
    return accountLocked;
  }

  /**
   * Sets the account locked status for this user.
   *
   * @param isAccountLocked true to lock the account
   */
  public void setAccountLocked(final Boolean isAccountLocked) {
    this.accountLocked = isAccountLocked;
  }

  /**
   * Gets the count of failed login attempts.
   *
   * @return number of failed login attempts
   */
  public Integer getFailedLoginAttempts() {
    return failedLoginAttempts;
  }

  /**
   * Sets the count of failed login attempts.
   *
   * @param newFailedLoginAttempts number of failed attempts to set
   */
  public void setFailedLoginAttempts(final Integer newFailedLoginAttempts) {
    this.failedLoginAttempts = newFailedLoginAttempts;
  }

  /**
   * Gets the timestamp of the user's last successful login.
   *
   * @return last login timestamp (may be null if never logged in)
   */
  public LocalDateTime getLastLoginAt() {
    return lastLoginAt;
  }

  /**
   * Sets the timestamp of the user's last successful login.
   *
   * @param newLastLoginAt the login timestamp to set
   */
  public void setLastLoginAt(final LocalDateTime newLastLoginAt) {
    this.lastLoginAt = newLastLoginAt;
  }

  /**
   * Gets the timestamp when the user account was created.
   *
   * @return account creation timestamp (never null for persisted entities)
   */
  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  /**
   * Gets the timestamp when the user account was last updated.
   *
   * @return last update timestamp (never null for persisted entities)
   */
  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  /**
   * Gets the user's full name by concatenating first and last names.
   *
   * @return full name in "FirstName LastName" format
   */
  public String getFullName() {
    return firstName + " " + lastName;
  }

  /**
   * Returns a string representation of the user's core attributes.
   *
   * @return string containing id, email, username, and names
   */
  @Override
  public String toString() {
    return "User{"
        + "id=" + id
        + ", email='" + email + '\''
        + ", username='" + username + '\''
        + ", firstName='" + firstName + '\''
        + ", lastName='" + lastName + '\''
        + '}';
  }
}
